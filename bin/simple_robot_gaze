#!/usr/bin/python

"""

Copyright(c) <Florian Lier, Simon Schulz>
http://opensource.cit-ec.de/fsmt

This file may be licensed under the terms of the
GNU Lesser General Public License Version 3 (the ``LGPL''),
or (at your option) any later version.

Software distributed under the License is distributed
on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
express or implied. See the LGPL for the specific language
governing rights and limitations.

You should have received a copy of the LGPL along with this
program. If not, go to http://www.gnu.org/licenses/lgpl.html
or write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

The development of this software was supported by the
Excellence Cluster EXC 277 Cognitive Interaction Technology.
The Excellence Cluster EXC 277 is a grant of the Deutsche
Forschungsgemeinschaft (DFG) in the context of the German
Excellence Initiative.

Authors: Florian Lier, Simon Schulz
<flier, sschulz>@techfak.uni-bielefeld.de

"""

# STD IMPORTS
import os
import sys
import time
import signal
import threading
from optparse import OptionParser

# PYQT
from PyQt4 import QtGui

# SELF IMPORTS
from srg.gui import viz as v
from srg.behavior import arbitration as a


def runner(_options):
    """
    Runner Function:
    1)  Start the Arbitration Thread which will configure the Middleware,
        Robot Driver and Gaze Control Threads.
    2)  Start the GUI
    3)  Implements a SIGNAL handler in order to (catch SIGINT) and gracefully
        exit program
    :param _options input options from command line
    """
    global ar
    ar = a.Arbitration(_options.config, options.outscope)
    # Init the Robot Driver
    ar.boot_robot_driver(str(options.middleware).upper())
    # Middlware and Gaze Configuration
    ar.configure()
    # Start Arbitration
    ar.start()
    # Signal Handling
    signal.signal(signal.SIGINT, signal_handler)
    # Run the visualisation
    run_viz()


def run_viz():
    """
    PtQt Visualisation of incoming inputs and current
    control input
    """
    global app, gui
    app = QtGui.QApplication(sys.argv)
    gui = v.Viz(ar.input_sources, ar.gaze_controller, ar)
    gui.start_update_threads()
    gui.show()
    ret = app.exec_()
    print ">>> Exiting..."
    ar.request_stop()
    gui.run_toggle = False
    time.sleep(0.2)
    app.exit()
    time.sleep(0.2)
    print ">>> Bye!"
    sys.exit(ret)


def signal_handler(sig, frame):
    """
    Callback function for the signal handler, catches signals
    and gracefully stops the application, i.e., exit subscribers
    before killing the main thread.
    :param sig the signal number
    :param frame frame objects represent execution frames.
    """
    print ">>> Exiting (signal %s)..." % str(sig)
    ar.request_stop()
    gui.run_toggle = False
    time.sleep(0.2)
    app.exit()
    time.sleep(0.2)
    print ">>> Bye!"
    sys.exit(0)


if __name__ == '__main__':

    parser = OptionParser(usage="Usage: %prog [options]")
    parser.add_option("-o", "--outscope",
                      action="store",
                      dest="outscope",
                      default="/meka",
                      help=
                      "Set the HLRC target topic. This is the robot you need to control. [Default: /meka]")
    parser.add_option("-c", "--config",
                      action="store",
                      dest="config",
                      default=os.environ['HOME'] + "/.config/simplerobotgaze.yaml",
                      help="Location of the Simple Robot Gaze config file. [Default: ~/.config/simplerobotgaze.yaml]")
    parser.add_option("-l", "--loglevel",
                      action="store",
                      dest="loglevel",
                      default="info",
                      help="Set the logging level for console output. Available are info and debug. [Default: info]")
    parser.add_option("-m", "--middleware",
                      action="store",
                      dest="middleware",
                      default="ROS",
                      help="Set the default middleware. Supported is ROS and RSB [Default: ROS]")

    (options, args) = parser.parse_args()

    runner(options)
